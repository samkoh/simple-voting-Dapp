import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import React, { useState, useEffect } from "react";
import { ethers } from "ethers";
import { contractABI, contractAddress } from "./Engine";
import Navbar from "./Navbar";
import { FaGithub, FaLinkedin } from "react-icons/fa";



export default function Home() {
  const [candidatesUseState, setCandidatesUseState] = useState([]);
  const [voters, setVoters] = useState([]);
  const [account, setCurrentAccount] = useState();
  const [walletAddress, setWalletAddress] = useState("");
  const [votedOrNot, setVotedOrNot] = useState();
  const [candidateId, setCandidateId] = useState();

  const checkIfWalletIsConnected = async () => {
    try {
      const { ethereum } = window;

      if (!ethereum) {
        console.log("Please Install Metamask");
      } else {
        console.log("We have the ethereum object", ethereum);
      }

      const accounts = await ethereum.request({ method: "eth_accounts" });
      if (accounts.length) {
        const account = accounts[0];
        setCurrentAccount(account);
        console.log("Connected");
      } else {
        setCurrentAccount("");
        console.log("Not authorized account has found!");
      }
    } catch (error) {
      console.log(error);
    }
  };

  const connectWallet = async () => {
    try {
      const { ethereum } = window;

      if (!ethereum) {
        alert("Metamask has found!");
        return;
      }

      const accounts = await ethereum.request({
        method: "eth_requestAccounts",
      });
    } catch (err) {
      console.error(err.message);
    }
  };

  const getCandidates = async (candidateId) => {
    const provider = new ethers.providers.Web3Provider(window.ethereum);

    const connection = new ethers.Contract(
      contractAddress,
      contractABI,
      provider
    );

    const candidatesCount = Number(await connection.candidateCount());
    let candidates = [];

    for (var i = 1; i <= candidatesCount; i++) {
      const candidate = await connection.candidates(i);
      candidates.push({
        id: Number(candidate[0]),
        name: candidate[1].toString(),
        voteCount: candidate[2].toNumber()
      });
    }

    setCandidatesUseState(candidates);
  };

  const checkVotingStatus = async (voter) => {
    try {
      const provider = new ethers.providers.Web3Provider(window.ethereum);

      const connection = new ethers.Contract(
        contractAddress,
        contractABI,
        provider
      );

      const hasVoted = await connection.voters(voter);
      console.log(voter, "hasVoted: ", hasVoted);
      setVotedOrNot(hasVoted);
    } catch (error) {
      console.error(error);
    }
  };

  const changeHandler = (e) => {
    setWalletAddress(e.target.value);
  };

  const handleButtonClick = async () => {
    await checkVotingStatus(walletAddress);
  };

  const vote = async (candidateId) => {
    try {
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = await provider.getSigner();

      const connection = new ethers.Contract(
        contractAddress,
        contractABI,
        signer
      );

      const vote = await connection.vote(candidateId);
    } catch (error) {
      console.error(error);
    }
  };

  const handleChange2 = (e) => {
    setCandidateId(e.target.value);
  };

  const buttonClick2 = () => {
    vote(candidateId);
  };

  useEffect(() => {
    checkIfWalletIsConnected();
    connectWallet();
    getCandidates();
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Web3 Voting DAPP</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/icon.png" />
      </Head>

      <Navbar account={account} connectWallet={connectWallet} />

      <main className={styles.main}>
        <div className={styles.candidatesSection}>
          <h1 className="font-bold text-3xl m-5">Candidates:</h1>
          <div className={styles.tableWrapper}>
            <table className={styles.table}>
              <thead>
                <tr>
                  <th className={styles.tableHeader}>Candidate Id</th>
                  <th className={styles.tableHeader}>Candidate Name</th>
                  <th className={styles.tableHeader}>Vote Count</th>
                </tr>
              </thead>
              <tbody>
                {candidatesUseState.map((candidate, i) => (
                  <tr key={i}>
                    <td className={styles.tableCell}>{candidate.id}</td>
                    <td className={styles.tableCell}>{candidate.name}</td>
                    <td className={styles.tableCell}>{candidate.voteCount}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        <div className={styles.checkVotedSection}>
          <h2 className="font-bold text-3xl mt-10 ml-5">Check Voted or Not:</h2>
          <div className={styles.checkVotedContainer}>
            <input
              type="text"
              className={styles.input}
              placeholder="Enter wallet address"
              value={walletAddress || ""}
              onChange={changeHandler}
            />
            <button
              onClick={handleButtonClick}
              className={styles.checkVotedButton}
            >
              Check if voted
            </button>
            <div className={styles.votedStatus}>
              {votedOrNot ? (
                <p className={styles.redText}>You have already voted, cannot vote anymore!</p>
              ) : (
                <p className={styles.greenText}>You have not voted yet!</p>
              )}
            </div>
          </div>
        </div>

        <div className={styles.voteSection}>
          <h2 className="font-bold text-3xl mt-8 ml-5">Vote: </h2>
          <div className={styles.voteContainer}>
            <input
              type="text"
              className={styles.input}
              pattern="\d{0,2}"
              maxLength="2"
              placeholder="Candidate Id"
              value={candidateId || ""}
              onChange={handleChange2}
              required
            />
            <button onClick={buttonClick2} className={styles.voteButton}>
              Vote
            </button>
            <div className={styles.emptyDiv}></div>
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://github.com/samkoh"
          target="_blank"
          rel="noopener noreferrer"
          className={styles.footerLink}
        >
          <FaGithub />
        </a>
        <a
          href="https://linkedin.com/in/samkoha81718123"
          target="_blank"
          rel="noopener noreferrer"
          className={styles.footerLink}
        >
          <FaLinkedin />
        </a>
        <span className={styles.footerLink}>
          <a href="" className={styles.footerLink}>
            @2023
          </a>
        </span>
      </footer>


    </div>
  );
}
